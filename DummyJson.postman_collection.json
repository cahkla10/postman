{
	"info": {
		"_postman_id": "7cf22cab-64e1-4be8-916a-b4c62cc108c7",
		"name": "Dummy Json",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Login user and get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get accountFirstName value in environment variable",
									"var firstNameEnvVar = pm.environment.get(\"accountFirstName\");",
									"//get accountLastName value in environment variable",
									"var lastNameEnvVar = pm.environment.get(\"accountLastName\");",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//set object token in response body to token variable in environment",
									"pm.environment.set(\"token\", jsonData.token);",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});",
									"",
									"//call firstname and lastname at declarated variable above for check is there firstname and lastname according to the value in environment",
									"pm.test(\"There are \" + firstNameEnvVar +  \" and \" + lastNameEnvVar, function () {",
									"    pm.expect(pm.response.text()).to.include(firstNameEnvVar);",
									"    pm.expect(pm.response.text()).to.include(lastNameEnvVar);",
									"});",
									"",
									"console.log(\"responseTimeEnvVar: \" + responseTimeEnvVar);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"username\": \"kminchelle\",\n    \"password\": \"0lelplR\",\n    \"expiresInMins\": 30\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base.url}}/auth/login",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get current auth user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/auth/me",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"auth",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh auth session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get token variable value in environment before replaced with new token",
									"var oldTokenEnvVar = pm.environment.get(\"token\");",
									"//get token object from response body",
									"var newTokenResBody = jsonData.token;",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is token updated or not after refresh request is run",
									"if(newTokenResBody == oldTokenEnvVar){",
									"    pm.test(\"Token is not changed & failed to updated\");",
									"} else {",
									"    pm.test(\"Token is changed & successfully to updated\");",
									"    pm.environment.set(\"token\", pm.response.json().token);",
									"}",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \n    \"expiresInMins\": 30\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base.url}}/auth/refresh",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Product",
			"item": [
				{
					"name": "Get all products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//set product id object in json body to idProduct environment variable",
									"pm.environment.set(\"idProduct\", jsonData.products[2].id);",
									"//set product title object in json body to titleProduct environment variable",
									"pm.environment.set(\"titleProduct\", jsonData.products[2].title);",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});",
									"",
									"//show all product title in response body",
									"for(let i = 0; i < jsonData.products.length; i++){",
									"    pm.test(\"Product title \" + i + \": \" + jsonData.products[i].title);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get addProduct variable value in environment",
									"var productTitleEnvVar = pm.environment.get(\"titleProduct\");",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is product title object in response body = product title which get from get all products request and has been set to environment variable",
									"pm.test(\"There is \" + productTitleEnvVar, function () {",
									"    pm.expect(jsonData.title).to.eql(productTitleEnvVar);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products/{{idProduct}}",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a new product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get product title from addProduct environment variable",
									"var newProductEnvVar = pm.environment.get(\"addProduct\");",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//to save and set the new product id object after add new product to newIdProduct environment variable",
									"pm.environment.set(\"newIdProduct\", jsonData.id);",
									"",
									"//check new product has been added",
									"pm.test(\"New product \" + newProductEnvVar + \" successfully added\", function () {",
									"    pm.expect(jsonData.title).to.eql(newProductEnvVar);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{addProduct}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base.url}}/products/add",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"add"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a single product after add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get new product title variable value in environment",
									"var titleProductNewEnvVar = pm.environment.get(\"addProduct\");",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is product title object in response body = product title which get from get all products request and has been set to environment variable",
									"pm.test(\"There is \" + titleProductNewEnvVar, function () {",
									"    pm.expect(jsonData.title).to.eql(titleProductNewEnvVar);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products/{{newIdProduct}}",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"{{newIdProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search products after add",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get new product title at environment variable after add in add a new product request",
									"var titleProductNewEnvVar = pm.environment.get(\"addProduct\");",
									"//get new product title object from response body",
									"var titleProductNewResBody = jsonData.products[0].title;",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check there is new product title equal with added new product title",
									"pm.test(\"There is \" + titleProductNewEnvVar, function () {",
									"    pm.expect(titleProductNewResBody).to.eql(titleProductNewEnvVar);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products/search?q={{addProduct}}",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{addProduct}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get old product title from titleProduct environment variable ",
									"var oldProductEnvVar = pm.environment.get(\"titleProduct\");",
									"//get update product title from title object in response body",
									"var updatedProductTitle = jsonData.title;",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is old product title has been updated or not",
									"pm.test(\"Old product title: \" + oldProductEnvVar + \" successfully updated become to \" + updatedProductTitle, function () {",
									"    pm.expect(updatedProductTitle).to.not.eql(oldProductEnvVar);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"{{titleProduct}} Update\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base.url}}/products/{{idProduct}}",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get product title response body that already deleted",
									"var productTitleResBody = jsonData.title;",
									"//get isDeleted response body value",
									"var isDeletedResBody = jsonData.isDeleted;",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check product success deleted",
									"pm.test(\"Product \" + productTitleResBody + \" succesfully deleted\", function () {",
									"    pm.expect(isDeletedResBody).to.eql(true);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{base.url}}/products/{{idProduct}}",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"{{idProduct}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get product title variable value in environment",
									"var titleProductEnvVar = pm.environment.get(\"titleProduct\");",
									"//get product title object in response body",
									"var titleProductResBody = jsonData.products[0].title;",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is product title object in response body = product title which get from get all products request and has been set to environment variable",
									"pm.test(\"There is \" + titleProductEnvVar, function () {",
									"    pm.expect(titleProductResBody).to.eql(titleProductEnvVar);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products/search?q={{titleProduct}}",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{titleProduct}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Limit and skip products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get skip variable value in environment",
									"var skipEnvVar = Number(pm.environment.get(\"skipPagination\"));",
									"//get limit variable value in environment",
									"var limitEnvVar = Number(pm.environment.get(\"limitPagination\"));",
									"//get skip object in response body",
									"var skipResBody = jsonData.skip;",
									"//get limit object in response body",
									"var limitResBody = jsonData.limit;",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is skip object in response body = skip variable in environment variable",
									"pm.test(\"Skip in environment variable is \" + skipEnvVar + \" and skip in response body is \" + skipResBody, function () {",
									"    pm.expect(skipEnvVar).to.eql(skipResBody);",
									"});",
									"",
									"//check is limit object in response body = limit variable in environment variable",
									"pm.test(\"Limit in environment variable is \" + limitEnvVar + \" and limit in response body is \" + limitResBody, function () {",
									"    pm.expect(limitEnvVar).to.eql(limitResBody);",
									"});",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products?limit={{limitPagination}}&skip={{skipPagination}}&select=title,price",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limitPagination}}"
								},
								{
									"key": "skip",
									"value": "{{skipPagination}}"
								},
								{
									"key": "select",
									"value": "title,price"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all products categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get response body json data",
									"var jsonData = pm.response.json();",
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//set category of product object in json body to catProduct environment variable",
									"pm.environment.set(\"catProduct\", jsonData[13].slug);",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});",
									"",
									"//show all category product in response body",
									"for(let i = 0; i < jsonData.length; i++){",
									"    pm.test(\"Category product \" + i + \": \" + jsonData[i].name);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products/categories",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get products of a category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//get responseTime environment variable",
									"var responseTimeEnvVar = Number(pm.environment.get(\"responseTime\"));",
									"",
									"//check is status code is 200?",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check is response time is < 1000ms?",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(responseTimeEnvVar);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							}
						],
						"url": {
							"raw": "{{base.url}}/products/categories/{{catProduct}}",
							"host": [
								"{{base.url}}"
							],
							"path": [
								"products",
								"categories",
								"{{catProduct}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}